import pandas as pd
import matplotlib.pyplot as plt

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏–∏
def moving_average_extrapolation(series, window, steps):
    values = list(series[-window:])  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–∫–Ω—É
    forecast = []  # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤

    for _ in range(steps):
        avg = sum(values[-window:]) / window  # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ
        forecast.append(avg)
        values.append(avg)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Å–ø–∏—Å–æ–∫

    return forecast

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏
def analyze_births(children_data_file, total_births_data_file, forecast_years):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
    children_data = pd.read_json(children_data_file)
    total_births_data = pd.read_json(total_births_data_file)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥—É
    df = pd.merge(children_data, total_births_data, on="year")
    df["percentage_out_of_wedlock"] = (df["children_born_out_of_wedlock"] / df["total_births"]) * 100

    # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ –≤–Ω–µ –±—Ä–∞–∫–∞
    print("\n–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ–∂–¥–µ–Ω–∏–π –≤–Ω–µ –±—Ä–∞–∫–∞ –ø–æ –≥–æ–¥–∞–º:")
    print(df[["year", "percentage_out_of_wedlock"]].to_string(index=False))

    # –ì—Ä–∞—Ñ–∏–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    plt.figure(figsize=(10, 5))
    plt.plot(df["year"], df["percentage_out_of_wedlock"], marker="o", label="–§–∞–∫—Ç")
    plt.title("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–µ—Ç–µ–π, —Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö –≤–Ω–µ –±—Ä–∞–∫–∞")
    plt.xlabel("–ì–æ–¥")
    plt.ylabel("–ü—Ä–æ—Ü–µ–Ω—Ç")
    plt.grid(True)
    plt.legend()
    plt.show()

    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –≥–æ–¥–∞–º
    df["change"] = df["percentage_out_of_wedlock"].diff()  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≥–æ–¥–æ–º
    max_change = df["change"].max()
    min_change = df["change"].min()
    max_year = df.loc[df["change"].idxmax(), "year"]
    min_year = df.loc[df["change"].idxmin(), "year"]

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    print(f"\nüìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç: {max_change:.2f}% –≤ {max_year} –≥–æ–¥—É")
    print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ: {min_change:.2f}% –≤ {min_year} –≥–æ–¥—É")

    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ)
    forecast = moving_average_extrapolation(df["percentage_out_of_wedlock"], window=3, steps=forecast_years)
    forecast_years_range = list(range(df["year"].max() + 1, df["year"].max() + 1 + forecast_years))

    # –ì—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
    plt.figure(figsize=(10, 5))
    plt.plot(df["year"], df["percentage_out_of_wedlock"], marker="o", label="–§–∞–∫—Ç")
    plt.plot(forecast_years_range, forecast, marker="x", linestyle="--", label="–ü—Ä–æ–≥–Ω–æ–∑")
    plt.title("–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö –≤–Ω–µ –±—Ä–∞–∫–∞ (—Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è)")
    plt.xlabel("–ì–æ–¥")
    plt.ylabel("–ü—Ä–æ—Ü–µ–Ω—Ç")
    plt.grid(True)
    plt.legend()
    plt.show()

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
def analyze_currency(currency_file, forecast_days):
    df = pd.read_json(currency_file)
    df["date"] = pd.to_datetime(df["date"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç datetime

    # –í—ã–≤–æ–¥–∏–º –∫—É—Ä—Å —Ä—É–±–ª—è –ø–æ –¥–Ω—è–º
    print("\n–ö—É—Ä—Å —Ä—É–±–ª—è –ø–æ –¥–Ω—è–º:")
    print(df[["date", "usd", "eur"]].to_string(index=False))

    # –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
    plt.figure(figsize=(12, 6))
    plt.plot(df["date"], df["usd"], label="USD")
    plt.plot(df["date"], df["eur"], label="EUR")
    plt.title("–ö—É—Ä—Å —Ä—É–±–ª—è –∫ USD –∏ EUR")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ö—É—Ä—Å")
    plt.legend()
    plt.grid(True)
    plt.show()

    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
    df["usd_change"] = df["usd"].diff()
    df["eur_change"] = df["eur"].diff()

    max_usd_gain = df["usd_change"].min()  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ä—É–±–ª—è
    max_usd_gain_date = df.loc[df["usd_change"].idxmin(), "date"]
    max_usd_loss = df["usd_change"].max()  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ä—É–±–ª—è
    max_usd_loss_date = df.loc[df["usd_change"].idxmax(), "date"]

    max_eur_gain = df["eur_change"].min()  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ä—É–±–ª—è –ø–æ EUR
    max_eur_gain_date = df.loc[df["eur_change"].idxmin(), "date"]
    max_eur_loss = df["eur_change"].max()  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ä—É–±–ª—è –ø–æ EUR
    max_eur_loss_date = df.loc[df["eur_change"].idxmax(), "date"]
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    print(f"\nüíµ USD:")
    print(f"  üìà –†—É–±–ª—å —É–∫—Ä–µ–ø–∏–ª—Å—è –Ω–∞ {abs(max_usd_gain):.2f} –≤ {max_usd_gain_date.date()}")
    print(f"  üìâ –†—É–±–ª—å –æ—Å–ª–∞–± –Ω–∞ {abs(max_usd_loss):.2f} –≤ {max_usd_loss_date.date()}")
    
    print(f"\nüí∂ EUR:")
    print(f"  üìà –†—É–±–ª—å —É–∫—Ä–µ–ø–∏–ª—Å—è –Ω–∞ {abs(max_eur_gain):.2f} –≤ {max_eur_gain_date.date()}")
    print(f"  üìâ –†—É–±–ª—å –æ—Å–ª–∞–± –Ω–∞ {abs(max_eur_loss):.2f} –≤ {max_eur_loss_date.date()}")

    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç (—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ)
    for currency in ["usd", "eur"]:
        forecast = moving_average_extrapolation(df[currency], window=3, steps=forecast_days)
        forecast_dates = pd.date_range(start=df["date"].max() + pd.Timedelta(days=1), periods=forecast_days)

        plt.figure(figsize=(10, 4))
        plt.plot(df["date"], df[currency], label="–§–∞–∫—Ç", marker="o")
        plt.plot(forecast_dates, forecast, label="–ü—Ä–æ–≥–Ω–æ–∑", linestyle="--", marker="x")
        plt.title(f"–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è –∫ {currency.upper()} (—Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è)")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ö—É—Ä—Å")
        plt.legend()
        plt.grid(True)
        plt.show()

# === –ó–∞–ø—É—Å–∫ ===
import os

if __name__ == "__main__":
    try:
        forecast_n = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏: "))
        
        births_path1 = "d:/4 —Å–µ–º–µ—Å—Ç—Ä/1/childrenData.json"
        births_path2 = "d:/4 —Å–µ–º–µ—Å—Ç—Ä/1/totalBirthsData.json"
        currency_path = "d:/4 —Å–µ–º–µ—Å—Ç—Ä/1/exchangeRates.json"

        
        analyze_births(births_path1, births_path2, forecast_n)

        forecast_n_days = int(input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç: "))
        analyze_currency(currency_path, forecast_n_days)

    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî {e}")
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
